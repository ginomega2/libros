

POSTMAN JSON
update
 {
        "id": 1,
        "name": "java postman",
        "desciption": "java postman",
        "price": 123
    }

add
 {
        "name": "postman",
        "desciption": "postman",
        "price": 777
    }



<!DOCTYPE HTML>
<html xmlns:th="https://www.thymeleaf.org">
<head>
  <title>Getting Started: Handling Form Submission</title>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<h1>CREAR LOCALIDAD</h1>
<form action="#" th:action="@{/local/crear}" th:object="${location}" method="post">
  <p>Id: <input type="text" th:field="*{id}" /></p>
  <p>code: <input type="text" th:field="*{code}" /></p>
  <p>code: <input type="text" th:field="*{name}" /></p>
<!--  <p>type: <input type="text" th:field="*{type}" /></p>-->
  Urban <input type="radio"  th:field="*{type}"  value="URBAN"/>
  Rural <input type="radio"  th:field="*{type}"  value="RURAL"/>


  <p><input type="submit" value="Submit" /> <input type="reset" value="Reset" /></p>
</form>
<b th:text="${msg}"></b>
<a href="/crear">Crear potra localidad</a>
</body>
</html>






1. Add dependency for PostgreSQL JDBC Driver
Declare the following dependency in your projectâ€™s pom.xml file:

1
2
3
4
5
	
<dependency>
    <groupId>org.postgresql</groupId>
    <artifactId>postgresql</artifactId>
    <scope>runtime</scope>
</dependency>
This will use the default version specified by Spring Boot. If you want to explicitly specify a PostgreSQL JDBC version, refer to this page.

 

2. Configure Data Source Properties
Next, you need to specify some database connection information in the Spring Boot application configuration file (application.properties) as follows:

1
2
3
	
spring.datasource.url=jdbc:postgresql://localhost:5432/shopme
spring.datasource.username=postgres
spring.datasource.password=password
Here, the JDBC URL points to a PostgreSQL database server running on localhost. Update the JDBC URL, username and password according to your environment.



 

3. Connect to PostgreSQL Database with Spring JDBC
In the simplest case, you can use Spring JDBC with JdbcTemplate to work with a relational database. So add the following dependency to your Maven project file:

1
2
3
4
	
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jdbc</artifactId>
</dependency>
And the following code example is of a Spring Boot console program uses JdbcTemplate to execute a SQL Insert statement:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
	
package net.codejava;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jdbc.core.JdbcTemplate;
 
@SpringBootApplication
public class SpringJdbcTemplate2PostgreSqlApplication implements CommandLineRunner {
 
    @Autowired
    private JdbcTemplate jdbcTemplate;
     
    public static void main(String[] args) {
        SpringApplication.run(SpringJdbcTemplate2PostgreSqlApplication.class, args);
    }
 
    @Override
    public void run(String... args) throws Exception {
        String sql = "INSERT INTO students (name, email) VALUES ("
                + "'Nam Ha Minh', 'nam@codejava.net')";
         
        int rows = jdbcTemplate.update(sql);
        if (rows > 0) {
            System.out.println("A new row has been inserted.");
        }
    }
 
}
This program will insert a new row into the students table in a PostgreSQL database, using Spring JDBC which is a thin API built on top of JDBC.

For details about using Spring JdbcTemplate, I recommend you to read this tutorial.

 

4. Connect to PostgreSQL Database with Spring Data JPA
If you want to map Java classes to tables and Java objects to rows and take advantages of an Object-Relational Mapping (ORM) framework like Hibernate, you can use Spring Data JPA. So declare the following dependency to your project:

1
2
3
4
	
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
Besides the JDBC URL, username and password, you can also specify some additional properties as follows:

1
2
3
4
	
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL81Dialect
And you need to code an entity class (a POJO Java class) to map with the corresponding table in the database, as follows:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
	
package net.codejava;
 
import javax.persistence.*;
 
@Entity
@Table(name = "students")
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
 
    private String name;
    private String email;
 
    // getters and setters...
}
Then you need to declare a repository interface as follows:

1
2
3
4
5
6
7
	
package net.codejava;
 
import org.springframework.data.jpa.repository.JpaRepository;
 
public interface StudentRepository extends JpaRepository<Student, Integer> {
 
}
And then you can use this repository in a Spring MVC controller or business class as follows:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
	
@Controller
public class StudentController {
    @Autowired
    private StudentRepository studentRepo;
       
    @GetMapping("/students")
    public String listAll(Model model) {
        List<Studnet> listStudents = studentRepo.findAll();
        model.addAttribute("listStudents", listStudents);
           
        return "students";
    }
       
}
I recommend you to follow this article: Understand Spring Data JPA with Simple Example to learn more about Spring Data JPA.